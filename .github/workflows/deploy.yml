name: Deploy OCI Workstation

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  terraform:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      # OCI Provider envs
      OCI_TENANCY_OCID: ${{ secrets.OCI_TENANCY_OCID }}
      OCI_USER_OCID: ${{ secrets.OCI_USER_OCID }}
      OCI_FINGERPRINT: ${{ secrets.OCI_FINGERPRINT }}
      OCI_REGION: ${{ secrets.OCI_REGION }}
      OCI_COMPARTMENT_OCID: ${{ secrets.OCI_COMPARTMENT_OCID }}
      SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
      OCI_PRIVATE_KEY_B64: ${{ secrets.OCI_PRIVATE_KEY_B64 }}
      OCI_PRIVATE_KEY_PEM: ${{ secrets.OCI_PRIVATE_KEY_PEM }}

      # Terraform variables
      TF_VAR_compartment_ocid: ${{ secrets.OCI_COMPARTMENT_OCID }}
      TF_VAR_region: ${{ secrets.OCI_REGION }}
      TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
      TF_VAR_tenancy_ocid: ${{ secrets.OCI_TENANCY_OCID }}
      TF_VAR_user_ocid: ${{ secrets.OCI_USER_OCID }}
      TF_VAR_fingerprint: ${{ secrets.OCI_FINGERPRINT }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare OCI private key for Terraform
        id: prep_key
        shell: bash
        env:
          OCI_PRIVATE_KEY: ${{ secrets.OCI_PRIVATE_KEY }}
          OCI_PRIVATE_KEY_B64: ${{ env.OCI_PRIVATE_KEY_B64 }}
          OCI_PRIVATE_KEY_PEM: ${{ env.OCI_PRIVATE_KEY_PEM }}
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.oci"
          # Prefer already base64-encoded secrets if present
          if [ -n "${OCI_PRIVATE_KEY_B64:-}" ]; then
            TF_B64_KEY="$OCI_PRIVATE_KEY_B64"
          elif [ -n "${OCI_PRIVATE_KEY_PEM:-}" ]; then
            TF_B64_KEY="$OCI_PRIVATE_KEY_PEM"
          elif [ -n "${OCI_PRIVATE_KEY:-}" ]; then
            # If raw PEM provided, both write file (fallback) and base64-encode for TF
            printf "%s" "$OCI_PRIVATE_KEY" > "$HOME/.oci/oci_api_key.pem"
            chmod 600 "$HOME/.oci/oci_api_key.pem"
            TF_B64_KEY=$(printf "%s" "$OCI_PRIVATE_KEY" | base64 | tr -d '\n')
          else
            echo "No OCI private key secret provided" >&2
            exit 1
          fi
          echo "OCI_PRIVATE_KEY_PATH=$HOME/.oci/oci_api_key.pem" >> $GITHUB_ENV
          echo "TF_VAR_private_key=$TF_B64_KEY" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Init
        working-directory: infra
        run: terraform init -input=false

      - name: Terraform Validate
        working-directory: infra
        run: |
          terraform fmt -check
          terraform validate

      - name: Terraform Apply with Region/AD/OCPU retries
        working-directory: infra
        env:
          OCI_PRIVATE_KEY_PATH: ${{ env.OCI_PRIVATE_KEY_PATH }}
          TF_VAR_private_key_path: ${{ env.OCI_PRIVATE_KEY_PATH }}
          # Optional overrides
          OCI_AD_INDEX: ${{ secrets.OCI_AD_INDEX }}
          OCI_OCPU: ${{ secrets.OCI_OCPU }}
          OCI_REGION_CANDIDATES: ${{ secrets.OCI_REGION_CANDIDATES }}
          OCI_SHAPE_PRIMARY: ${{ secrets.OCI_SHAPE_PRIMARY }}
          OCI_ALLOW_OCPU_FALLBACK: ${{ secrets.OCI_ALLOW_OCPU_FALLBACK }}
        shell: bash
        run: |
          set -euo pipefail
          terraform version
          terraform workspace show || true
          
          # Build region candidates: use secret list (space-separated) or the configured region.
          if [ -n "${OCI_REGION_CANDIDATES:-}" ]; then
            # Use only the first region provided
            REGIONS="$(set -- $OCI_REGION_CANDIDATES; echo $1)"
          else
            # Revert to single region: uk-london-1
            REGIONS="uk-london-1"
          fi

          # Build AD candidates. If a specific AD is provided, try only that.
          if [ -n "${OCI_AD_INDEX:-}" ]; then
            AD_CANDIDATES="$OCI_AD_INDEX"
          else
            AD_CANDIDATES="0 1 2"
          fi

          # Desired OCPUs (default 2). May fallback to 1 if capacity issues persist.
          OCPUS_DESIRED="${OCI_OCPU:-2}"
          SHAPE_PRIMARY="${OCI_SHAPE_PRIMARY:-VM.Standard.A1.Flex}"

          attempt_apply() {
            local region="$1"; local ad_idx="$2"; local ocpus="$3"; local shape="$4"
            echo "Attempting apply: region=$region ad_index=$ad_idx ocpus=$ocpus shape=$shape"
            set +e
            terraform apply -auto-approve -input=false \
              -var "region=${region}" -var "ad_index=${ad_idx}" -var "ocpus=${ocpus}" -var "shape=${shape}"
            rc=$?
            set -e
            return $rc
          }

          cleanup_region() {
            local region="$1"
            echo "Cleaning up resources in region $region"
            set +e
            terraform destroy -auto-approve -input=false -var "region=${region}"
            set -e || true
          }

          success=0
          SELECTED_SUMMARY=""
          for r in $REGIONS; do
            echo "Reconfiguring provider for region: $r"
            terraform init -reconfigure -input=false

            # First pass: desired OCPUs
            for ad in $AD_CANDIDATES; do
              if attempt_apply "$r" "$ad" "$OCPUS_DESIRED" "$SHAPE_PRIMARY"; then
                success=1; SELECTED_SUMMARY="region=$r ad=$ad ocpus=$OCPUS_DESIRED shape=$SHAPE_PRIMARY"; break 2
              fi
            done

            # Second pass: fallback to 1 OCPU
            if [ "$OCPUS_DESIRED" != "1" ] && [ "${OCI_ALLOW_OCPU_FALLBACK:-false}" = "true" ]; then
              echo "Retrying region $r with fallback OCPUs=1 due to capacity (A1 only)"
              for ad in $AD_CANDIDATES; do
                if attempt_apply "$r" "$ad" "1" "$SHAPE_PRIMARY"; then
                  success=1; SELECTED_SUMMARY="region=$r ad=$ad ocpus=1 shape=$SHAPE_PRIMARY"; break 2
                fi
              done
            fi

            # If we reach here, region failed; cleanup and try next region
            cleanup_region "$r" || true
          done

          if [ $success -eq 0 ]; then
            echo "Terraform apply failed across all Region/AD/OCPU attempts" >&2
            exit 1
          fi
          echo "Selected deployment: $SELECTED_SUMMARY"
          echo "DEPLOYMENT_CHOICE=$SELECTED_SUMMARY" >> $GITHUB_ENV

      - name: Save outputs to repo
        shell: bash
        working-directory: infra
        run: |
          set -euo pipefail
          mkdir -p ../deployment
          terraform output -json > ../deployment/outputs.json
          cd ..
          git config user.email "actions@github.com"
          git config user.name "github-actions"
          git add deployment/outputs.json
          git commit -m "chore: save outputs [skip ci]" || echo "No changes to commit"
          git push

      - name: Job summary
        shell: bash
        run: |
          echo "### Deployment Outputs" >> $GITHUB_STEP_SUMMARY
          if [ -f deployment/outputs.json ]; then
            IP=$(jq -r .public_ip.value deployment/outputs.json)
            USER=$(jq -r .rdp_username.value deployment/outputs.json)
            echo "Public IP: $IP" >> $GITHUB_STEP_SUMMARY
            echo "RDP user: $USER" >> $GITHUB_STEP_SUMMARY
            echo "Selection: ${DEPLOYMENT_CHOICE:-unknown}" >> $GITHUB_STEP_SUMMARY
          else
            echo "outputs.json not found." >> $GITHUB_STEP_SUMMARY
          fi
